"""
Django settings for chgskv project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Добавляем сторонние пакеты

    # celeri для отображения progressbar
    # https://github.com/czue/celery-progress
    'celery_progress',
    # пакет для сообщений телеграмм,mail smtp и др, вызываю телеграмм blok1\views.py функция Exchange_currency_bid
    # https://django-sitemessage.readthedocs.io/en/latest/quickstart.html
    'sitemessage',

    # Добавляем блоки(приложения)

    'blok1', # Домашняя страница, регистрация и аутентификация, страница обмена
    'blok2', # Кабинет пользователя или администратора(просмотр,редактирование,удаление учетных данных, справочников)
    'rest_framework', # Django инструмент для построения Web API, использую в blok2/serializers.py для datatables(таблиц)
    'blok3', # Страница обмена, форма обмена выбранных валют, страница новостей, страница правил
    'blok4', # Страница загрузки криптовалют, курсов криптовалютных пар Poloniex,

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chgskv.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chgskv.wsgi.application'



# логи для отладки в терминале pycharm debug, взял из примера datatables(китаец, https://www.youtube.com/watch?v=E0Pf5Ci-vGw)
#LOGGING = {
#    'version': 1,
#    'disable_existing_loggers': False,
#    'formatters': {
#        'verbose': {
#            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
#        },
#        'simple': {
#            'format': '%(levelname)s %(message)s'
#        },
#    },
    # 'filters': {
    #     'special': {
    #         '((cry) 'project.logging.SpecialFilter',
    #         'foo': 'bar',
    #     },
    #     'require_debug_true': {
    #         '((cry) 'django.utils.log.RequireDebugTrue',
    #     },
    # },
#    'handlers': {
#        'console': {
#            'level': 'DEBUG',
#            # 'filters': ['require_debug_true'],
#            'class': 'logging.StreamHandler',
#            'formatter': 'verbose'
#        },
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': 'mylog_test.log',
        #     'formatter': 'verbose'
        # },

        # 'mail_admins': {
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['special']
        # }
#    },
#    'loggers': {
#        'django': {
#            'handlers': ['console'],  # console or file
#            'propagate': True,
#            'level': 'DEBUG',
        #},
        #'django.request': {
        #    'handlers': ['console'],
        #    'level': 'DEBUG',
        #    'propagate': False,
        #},
        # For performance reasons, SQL logging is only enabled when settings.DEBUG is set to True
        # ref. https://docs.djangoproject.com/en/1.11/topics/logging/#django-db-backends
        #'django.db.backends': {
        #    'handlers': ['console'],
        #    'propagate': False,
        #    'level': 'DEBUG',
        #},
        # 'api.views': {
        #     'handlers': ['console'],
        #     'propagate': False,
        #     'level': 'DEBUG',
        # },
        # 'background_task': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': True,
        # }
        # 'myproject.custom': {
        #     'handlers': ['console', 'mail_admins'],
        #     'level': 'INFO',
        #     'filters': ['special']
        # }
#    }
#}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'  #UTC

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'



MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, "static", "media")

QR_ROOT = os.path.join(BASE_DIR, "static", "static_prg/qr/") # папка для записи img qr-код


# Настройки почтового сервера
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.mail.ru'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = "skiveda@mail.ru"
# EMAIL_HOST_USER = "skiveda@gmail.com"
# EMAIL_HOST_USER = 'SKIVEDA'
EMAIL_HOST_PASSWORD = "20061983Skv"
# EMAIL_HOST_PASSWORD = "28011972skv"
EMAIL_PORT = 587
SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# настройка Начиная с Django 3.2, теперь вы можете настроить тип автоматически созданного основного ключа в настройках.
# https://question-it.com/questions/3427304/preduprezhdenie-avtomaticheski-sozdannyj-pervichnyj-kljuch-ispolzuemyj-pri-opredelenii-tipa-pervichnogo-kljucha-po-umolchaniju-djangodbmodelsautofield
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# форматы для отображения значений дат для таблиц плагина datatables, описаны в blok2/serializers.py
DATE_FORMAT = '%m/%d/%Y'
DATETIME_FORMAT = '%m/%d/%Y %I:%M'

# Poloniex Api key
# Пакет для работы с API биржи Poloniex
# инициализация pip install poloniex(https://pypi.org/project/poloniex/)
POLONIEX_API_KEY = os.environ.get('POLONIEX_API_KEY', '97FGNN1N-ANZCODUT-RBBZQK1W-J2UV07A9')
POLONIEX_SECRET = os.environ.get('POLONIEX_SECRET', '06ef76c2f202313667ba1979a378752e3e02dde582673e0bd0e9a80d651a1f9897865fa672964c1ef404f24f356840d9255188ce80a6c0bf62ce38670bacb470')

# настройка celery для progress bar, pip install celery, pip install redis
# pip install django-celery-results
# https://www.youtube.com/watch?v=BbPswIqn2VI
# https://github.com/PrettyPrinted/youtube_video_code/blob/master/2020/06/24/How%20to%20Create%20a%20Celery%20Task%20Progress%20Bar%20in%20Django/djangoprogressbar/progress/progress/settings.py


# REDIS settings
# Настройки Redis условные и у вас они могут отличатся в зависимости от конфигурации
# Запуск терминала-сервера redis https://webdevblog.ru/asinhronnye-zadachi-v-django-s-redis-i-celery/
REDIS_HOST = '127.0.0.1'
REDIS_PORT = '6379'
# CELERY settings
CELERY_BROKER_URL = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_BROKER_TRANSPORT_OPTION = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Telegram bot-token
BOT_TOKEN = '5673547649:AAGattPvV8VCtzkS9uNRaLBgZAkw1Shayf8'

# Условие для выбора настроек, если локально то берем из local_settings.py, если на сервере то prod_settings.py

try:
    from .local_settings import *
except ImportError:
    from .prod_settings import *